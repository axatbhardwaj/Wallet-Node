const ethers = require('ethers');
const solc = require('solc');
const fs = require('fs');
//const walletGen = require(walletGen.js)
require("dotenv").config({ path: ".env" });
(async (contractName,pathToContract,argsArray) => {
  const provider = new ethers.providers.JsonRpcProvider(process.env.POLYGON_TESTNET_RPC_URL);
  var contractSupply = fs.readFileSync(pathToContract);
  contractSupply = contractSupply.toString();
  //console.log(contractSupply.toString());

  const input = {
    language: 'Solidity',
    sources: {
      'contract': { content: contractSupply },
    },
    settings: {
      //version :"0.8.0",
      outputSelection: { '*': { '*': ['*'] } },
      optimizer: {
        enabled: true,
        runs: 1000
      }
    }
  };
  
  // var Artifacts = 
  
  var metadata = JSON.parse(solc.compile(JSON.stringify(input)))
  var bytecode = metadata.contracts['contract'][contractName].evm.bytecode.object;
  console.log(bytecode);

  const abi = metadata.contracts['contract'][contractName].abi;
       /* 2. Extract Abi And Bytecode From Contract */
      //  const abi = contract.abi

  console.log(abi);
  //  const walletGen = ethers.Wallet.createRandom()
  
  // Use your wallet's private key to deploy the contract
  const privateKey = process.env.CONTRACT_DEPLOYER_PRIVATE_KEY;
  const wallet = new ethers.Wallet(privateKey, provider)

//   // Read the contract artifact, which was generated by Remix
  // var bytecode = metadata.evm.bytecode.object
  // console.log(bytecode);

  //Set gas limit and gas price, using the default Ropsten provider
  const price = ethers.utils.formatUnits(await provider.getGasPrice(), 'gwei')
  const options = { gasLimit: 100000, gasPrice: ethers.utils.parseUnits(price, 'gwei') }
  console.log(options);

  //Deploy the contract
  const factory = new ethers.ContractFactory(abi, bytecode, wallet)
  if (Array.isArray(argsArray) && argsArray.length > 0)
  {   
    //console.log(...argsArray);
    const contract = await factory.deploy(...argsArray);
    await contract.deployed();
    console.log(`Deployment successful! Contract Address: ${contract.address}`);
}
  
})("Greeter","/home/axat/per/wallet/Wallet-Node/contracts/Greeter.sol",["hi"])